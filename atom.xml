<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>starqiu&#39;s blog</title>
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/"/>
  <updated>2017-07-07T05:53:02.984Z</updated>
  <id>https://github.com/</id>
  
  <author>
    <name>starqiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据挖掘的标准流程：CRISP-DM模型</title>
    <link href="https://github.com/2017/08/27/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%9A%84%E6%A0%87%E5%87%86%E6%B5%81%E7%A8%8B%EF%BC%9ACRISP-DM%E6%A8%A1%E5%9E%8B/"/>
    <id>https://github.com/2017/08/27/数据挖掘的标准流程：CRISP-DM模型/</id>
    <published>2017-08-26T16:00:00.000Z</published>
    <updated>2017-07-07T05:53:02.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义">定义</h1><p>CRISP-DM是Cross-Industry Standard Process for Data Mining的缩写，也就是数据挖掘的跨行业标准流程，是一个已被业界证明的有效指南。它作为：</p>
<ol>
<li>一种方法论: 包含了对数据挖掘项目的六个典型阶段，以及每个阶段所包含的任务，并且解释了这些任务之间的关系。</li>
<li>一种流程模型: CRISP-DM提供了对数据挖掘生命周期的一个概览。这个生命周期模型包含了六个阶段，模型里的箭头指明了各阶段间最重要和频繁的依赖项。这些阶段的次序并非是严格的，事实上，大多数项目在需要的时候，会在各阶段之间来回反复。</li>
</ol>
<a id="more"></a>
<h1 id="流程">流程</h1><p>CRISP-DM 模型是数据挖掘最常用的标准流程，它为一个知识发现工程提供了一个完整的过程描述。该模型将一个知识发现工程分为6个不同的、但顺序并非完全不变的阶段，如下图所示。<br>[数据挖掘]数据挖掘的标准流程：CRISP-DM模型</p>
<center><img src="/images/dataMining/数据挖掘的标准流程：CRISP-DM模型 .png" alt="数据挖掘的标准流程：CRISP-DM模型"> </center><br>1.    业务理解 （Business Understanding）<br>最初的阶段集中在理解项目目标和从业务的角度理解需求，同时将这个知识转化为数据挖掘问题的定义和完成目标的初步计划。<br>可能包含以下几个步骤：场景，利弊，目标，计划<br>1.    数据理解 （Data Understanding）<br>数据理解阶段从初始的数据收集开始，通过一些活动的处理，目的是熟悉数据，识别数据的质量问题，首次发现数据的内部属性，或是探测引起兴趣的子集去形成隐含信息的假设。<br>可能包含以下几个步骤：数据初始化信息收集，数据描述（表结构、表属性及其注释），数据探索，数据质量<br>1.    数据准备 （Data Preparation）<br>数据准备阶段包括从未处理数据中构造最终数据集的所有活动。这些数据将是模型工具的输入值。这个阶段的任务有个能执行多次，没有任何规定的顺序。任务包括表、记录和属性的选择，以及为模型工具转换和清洗数据。<br>可能包含以下几个步骤：数据集描述，数据筛选，数据清洗，数据构造（转换？ 衍生属性，记录生成），数据融合，数据格式化<br>1.     建模（Modeling）<br>在这个阶段，可以选择和应用不同的模型技术，模型参数被调整到最佳的数值。一般，有些技术可以解决一类相同的数据挖掘问题。有些技术在数据形成上有特殊要求，因此需要经常跳回到数据准备阶段。<br>可能包含以下几个步骤：模型选择，测试设计，模型参数设置（调参），模型评估<br>1.     评估（Evaluation）<br>到项目的这个阶段，你已经从数据分析的角度建立了一个高质量显示的模型。在开始最后部署模型之前，重要的事情是彻底地评估模型，检查构造模型的步骤，确保模型可以完成业务目标。这个阶段的关键目的是确定是否有重要业务问题没有被充分的考虑。在这个阶段结束后，一个数据挖掘结果使用的决定必须达成。<br>可能包含以下几个步骤：评估结果，模型提升，决策<br>1.     部署 （Deployment）<br>通常，模型的创建不是项目的结束。模型的作用是从数据中找到知识，获得的知识需要便于用户使用的方式重新组织和展现。根据需求，这个阶段可以产生简单的报告，或是实现一个比较复杂的、可重复的数据挖掘过程。在很多案例中，这个阶段是由客户而不是数据分析人员承担部署的工作。<br>可能包含以下几个步骤：部署计划，监控及维护，产生最终的报告，review报告<br>来源： <a href="http://blog.sina.com.cn/s/blog_5d60f0650101l4sl.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_5d60f0650101l4sl.html</a><br><br>目前的CRISP-DM版本是v1.0版（1999年），v2.0还在研究中。<br><br>尽管CRISP-DM v1.0包含了一些图示，但整体上看还是比较抽象和复杂的。所以，下面我又提供另一种模型，来对CRISP-DM v1.0的六阶段进行分解，以更清晰展示，理解和实施。<br><center><img src="/images/dataMining/CRISP-DM v1.0.jpg" alt="数据挖掘的标准流程：CRISP-DM模型"> </center>

<h1 id="参考文献">参考文献</h1><ol>
<li><a href="https://www.the-modeling-agency.com/crisp-dm.pdf" target="_blank" rel="external">crisp-dm 1.0 - The Modeling Agency</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5d60f0650101l4sl.html" target="_blank" rel="external">数据挖掘的标准流程：CRISP-DM模型</a></li>
<li><a href="http://image.sciencenet.cn/olddata/kexue.com.cn/upload/blog/file/2010/11/2010116111321210346.0%E3%80%8B.pdf" target="_blank" rel="external">CRISP-DM 1.0 循序渐进数据挖掘指南</a></li>
<li><a href="https://vnnw00.wordpress.com/2010/01/20/crisp-dm%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/" target="_blank" rel="external">CRISP-DM数据挖掘项目流程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      数据挖掘的标准流程：CRISP-DM模型
    
    </summary>
    
      <category term="数据挖掘" scheme="https://github.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="数据挖掘" scheme="https://github.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>书单</title>
    <link href="https://github.com/2017/07/05/books/"/>
    <id>https://github.com/2017/07/05/books/</id>
    <published>2017-07-04T16:00:00.000Z</published>
    <updated>2017-07-05T05:35:01.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想读">想读</h2><ul>
<li>数据挖掘:概念与技术(原书第3版)</li>
<li>Java性能优化权威指南</li>
<li>统计思维:程序员数学之概率统计 唐尼 (Allen B.Downey)</li>
<li>深入理解Java虚拟机:JVM高级特性与最佳实践</li>
<li>Spark大数据处理：技术、应用与性能优化</li>
<li>图解机器学习 机器学习算法入门教程</li>
<li>C++ 沉思录</li>
<li>UNIX环境高级编程</li>
<li>七周七数据库 数据库NoSQL运动指南</li>
<li>Java并发编程实战<a id="more"></a>
<h2 id="在读">在读</h2></li>
</ul>
<ul>
<li>Java并发编程</li>
<li>Java性能优化权威指南</li>
</ul>
<h2 id="已读">已读</h2><ol>
<li>数据挖掘与R语言</li>
<li>R语言实战</li>
<li>Java8函数式编程</li>
<li>七周七并发模型</li>
<li>程序员修炼之道——从小工到专家注重实效的程序员之快速参考指南</li>
<li>数学之美</li>
<li>浪潮之巅</li>
<li>黑客与画家:硅谷创业之父Paul Graham文集</li>
<li>Spring in Action中文版【美，沃尔斯 著</li>
<li>Hadoop权威指南</li>
<li>C程序设计语言</li>
<li>计算机程序的构造和解释</li>
<li>编程珠玑第二册</li>
<li>编译原理</li>
<li>现代编译器的java的实现</li>
<li>编码:隐匿在计算机软硬件背后的语言</li>
<li>密码编码学与网络安全:原理与实践</li>
<li>C陷阱与缺陷</li>
<li>七周七语言 理解多种编程范型 </li>
<li>设计模式 可复用面向对象软件</li>
<li>程序员的自我修养—链接、装载与库</li>
<li>人月神话</li>
<li>重构:改善既有代码的设计</li>
<li>Effective Java中文版</li>
<li>程序员的数学【一本为程序员朋友们写的数学书】</li>
<li>编程珠玑(第2版) </li>
<li>代码大全</li>
<li>深入理解计算机系统</li>
<li>数据挖掘:概念与技术</li>
<li>Java编程思想中文版</li>
<li>算法导论</li>
<li>Java程序员面试宝典 第三版</li>
<li>剑指Offer </li>
</ol>
]]></content>
    
    <summary type="html">
    
      想读、在读以及已读书籍
    
    </summary>
    
      <category term="Books" scheme="https://github.com/categories/Books/"/>
    
    
      <category term="Books" scheme="https://github.com/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>给hexo/jacman增加“最新评论”的widget</title>
    <link href="https://github.com/2015/08/30/%E7%BB%99hexo%20jacman%E5%A2%9E%E5%8A%A0%E2%80%9C%E6%9C%80%E6%96%B0%E8%AF%84%E8%AE%BA%E2%80%9D%E7%9A%84widget/"/>
    <id>https://github.com/2015/08/30/给hexo jacman增加“最新评论”的widget/</id>
    <published>2015-08-29T16:00:00.000Z</published>
    <updated>2015-08-30T06:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>jacman使用了多说的评论系统，多说有最新评论的嵌入代码。当然直接嵌入肯定是不行的，和整体风格不统一看着不好看，那么就搞个类似友情链接、目录之类的widget好了。本文目标是新建一个widget显示多说的最新评论。</p>
<h1 id="步骤">步骤</h1><h2 id="新建widget">新建widget</h2><p>widget 文件在路径<code>themes/pacman/layout/_widget/</code>下，参考links.ejs以及archives.ejs及多说的嵌入代码，在该目录下新建一个comment.ejs文件，内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.duoshuo_recent_comment &amp;&amp; theme.duoshuo_shortname.length) &#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"commentslist"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"asidetitle"</span>&gt;</span><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">__</span>('<span class="attribute">comments</span>') %&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"ds-recent-comments"</span> <span class="attribute">data-num-items</span>=<span class="value">"5"</span> <span class="attribute">data-show-avatars</span>=<span class="value">"0"</span> <span class="attribute">data-show-time</span>=<span class="value">"1"</span> <span class="attribute">data-show-admin</span>=<span class="value">"1"</span> <span class="attribute">data-excerpt-length</span>=<span class="value">"32"</span> <span class="attribute">data-show-title</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多说js加载开始，一个页面只需要加载一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="keyword">var</span> duoshuoQuery = &#123;short_name:<span class="string">"&lt;%= theme.duoshuo.short_name %&gt;"</span>&#125;;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">    ds.src = <span class="string">'http://static.duoshuo.com/embed.js'</span>;</span><br><span class="line">    ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多说js加载结束，一个页面只需要加载一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>下面那段js是多说提供的嵌入代码，<code>&lt;ul&gt;</code>标签有一些参数可以指定评论的具体数量之类的，大致有以下可选参数<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//以下参数均为可选</span></span><br><span class="line"><span class="built_in">data</span><span class="attribute">-num</span><span class="attribute">-items</span><span class="subst">=</span><span class="string">"10"</span>     <span class="comment">//显示最新评论的条数，最大支持200条</span></span><br><span class="line"><span class="built_in">data</span><span class="attribute">-show</span><span class="attribute">-avatars</span><span class="subst">=</span><span class="string">"1"</span>   <span class="comment">//是否显示头像，1：显示，0：不显示</span></span><br><span class="line"><span class="built_in">data</span><span class="attribute">-show</span><span class="attribute">-time</span><span class="subst">=</span><span class="string">"1"</span>      <span class="comment">//是否显示时间，1：显示，0：不显示</span></span><br><span class="line"><span class="built_in">data</span><span class="attribute">-show</span><span class="attribute">-title</span><span class="subst">=</span><span class="string">"0"</span>     <span class="comment">//是否显示标题，1：显示，0：不显示</span></span><br><span class="line"><span class="built_in">data</span><span class="attribute">-show</span><span class="attribute">-admin</span><span class="subst">=</span><span class="string">"1"</span>     <span class="comment">//是否显示管理员的评论，1：显示，0：不显示</span></span><br><span class="line"><span class="built_in">data</span><span class="attribute">-excerpt</span><span class="attribute">-length</span><span class="subst">=</span><span class="string">"70"</span><span class="comment">//最大显示评论汉字数</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置widget">配置widget</h2><ol>
<li>首先先添加“最新评论”的多语言版本字符串值<br>即用变量comments表示，需要修改的相关文件为themes/pacman/languages/*.yml，看一下文件内容就知道怎么改了</li>
<li>添加一下相关的css样式<br>这里是以友情链接widget的css作为基准，稍加修改的，在<code>themes/pacman/source/css/_partial/aside.styl</code>文件末尾添加如下内容：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//comments</span></span><br><span class="line"><span class="class">.commentslist</span></span><br><span class="line">  <span class="attribute">margin-top</span> <span class="number">0.5em</span> </span><br><span class="line">  <span class="at_rule">@media</span> mini</span><br><span class="line">    <span class="attribute">width</span> <span class="number">45%</span> </span><br><span class="line">    <span class="attribute">float</span> <span class="attribute">left</span></span><br><span class="line">    <span class="attribute">margin</span> <span class="number">0</span> <span class="number">5%</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">  <span class="at_rule">@media</span> tablet </span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">float</span> <span class="attribute">none</span></span><br><span class="line">    <span class="attribute">margin</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line">  <span class="tag">ul</span>  </span><br><span class="line">    <span class="attribute">padding</span> <span class="number">0.5em</span> <span class="number">0</span></span><br><span class="line">    <span class="tag">a</span>   </span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">1em</span> </span><br><span class="line">      <span class="attribute">line-height</span> <span class="attribute">line-height</span></span><br><span class="line">      <span class="attribute">display</span> block</span><br><span class="line">      <span class="attribute">padding</span> <span class="number">0</span></span><br><span class="line">      <span class="pseudo">&amp;:hover</span><br><span class="line"></span>        <span class="attribute">color</span> <span class="attribute">color</span>-theme</span><br><span class="line">        <span class="attribute">transition</span> <span class="attribute">color</span> .<span class="number">25s</span></span><br><span class="line"></span><br><span class="line"><span class="class">.ds-excerpt</span></span><br><span class="line">  <span class="attribute">font-size</span> <span class="number">1.1em</span></span><br><span class="line">  <span class="attribute">color</span> <span class="attribute">color</span>-theme</span><br><span class="line"></span><br><span class="line"><span class="class">.ds-recent-comments</span></span><br><span class="line">  <span class="attribute">margin-top</span> -<span class="number">0.6em</span></span><br><span class="line">  <span class="attribute">margin-left</span> <span class="number">0.3em</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="开启widget">开启widget</h2><p>在<code>themes/jacman/_config.yml</code>的comment处添加配置<code>duoshuo_recent_comment: true</code></p>
<h1 id="参考">参考</h1><p>[1]： <a href="http://odinliu.com/2014/12/03/%E7%BB%99hexo-pacman%E5%A2%9E%E5%8A%A0%E2%80%9C%E6%9C%80%E6%96%B0%E8%AF%84%E8%AE%BA%E2%80%9D%E7%9A%84widget/" target="_blank" rel="external">给hexo/pacman增加“最新评论”的widget</a></p>
]]></content>
    
    <summary type="html">
    
      给hexo/jacman增加“最新评论”的widget
    
    </summary>
    
      <category term="hexo" scheme="https://github.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://github.com/tags/hexo/"/>
    
      <category term="theme" scheme="https://github.com/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>如何运行一个测试用例多次</title>
    <link href="https://github.com/2015/08/28/%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%A4%9A%E6%AC%A1/"/>
    <id>https://github.com/2015/08/28/如何运行一个测试用例多次/</id>
    <published>2015-08-27T16:00:00.000Z</published>
    <updated>2015-08-27T03:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题">问题</h1><blockquote>
<p>如何运行一个测试用例多次？</p>
</blockquote>
<h1 id="解答">解答</h1><ol>
<li>使用@RunWith(Parameterized.class)，需要多写一些无谓的代码</li>
<li>使用Rule,自己实现Repeat注解.见<a href="http://www.codeaffine.com/2013/04/10/running-junit-tests-repeatedly-without-loops/" target="_blank" rel="external">参考４</a></li>
<li>使用Runner,自己实现Repeat注解.见<a href="http://codehowtos.blogspot.com/2011/04/run-junit-test-repeatedly.html" target="_blank" rel="external">参考１</a>　这个方法目前实验起来最好。<br>使用：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RunWith</span>(ExtendedRunner.class)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleTest3</span> </span>&#123;  </span><br><span class="line">     <span class="annotation">@Test</span>  </span><br><span class="line">     <span class="annotation">@Repeat</span>(<span class="number">10</span>)  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sometimesFail</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">int</span> rand = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);  </span><br><span class="line">          <span class="keyword">if</span> (rand % <span class="number">3</span> == <span class="number">0</span>) &#123;  </span><br><span class="line">               fail();  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<p>  Repeat.java：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="annotation">@Target</span>(&#123;ElementType.METHOD&#125;)  </span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> Repeat &#123;  </span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  ExtendedRunner.java：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedRunner</span> <span class="keyword">extends</span> <span class="title">BlockJUnit4ClassRunner</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ExtendedRunner</span><span class="params">(Class&lt;?&gt; klass)</span> <span class="keyword">throws</span> InitializationError </span>&#123;  </span><br><span class="line">          <span class="keyword">super</span>(klass);  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="annotation">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">protected</span> Description <span class="title">describeChild</span><span class="params">(FrameworkMethod method)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">if</span> (method.getAnnotation(Repeat.class) != <span class="keyword">null</span> &amp;&amp;  </span><br><span class="line">                    method.getAnnotation(Ignore.class) == <span class="keyword">null</span>) &#123;  </span><br><span class="line">               <span class="keyword">return</span> describeRepeatTest(method);  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.describeChild(method);  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">private</span> Description <span class="title">describeRepeatTest</span><span class="params">(FrameworkMethod method)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">int</span> times = method.getAnnotation(Repeat.class).value();  </span><br><span class="line">  </span><br><span class="line">          Description description = Description.createSuiteDescription(  </span><br><span class="line">                    testName(method) + <span class="string">" ["</span> + times + <span class="string">" times]"</span>,  </span><br><span class="line">                    method.getAnnotations());  </span><br><span class="line">  </span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= times; i++) &#123;  </span><br><span class="line">               description.addChild(Description.createTestDescription(  </span><br><span class="line">                         getTestClass().getJavaClass(),  </span><br><span class="line">                         <span class="string">"["</span> + i + <span class="string">"] "</span> + testName(method)));  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">return</span> description;  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="annotation">@Override</span>  </span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runChild</span><span class="params">(<span class="keyword">final</span> FrameworkMethod method, RunNotifier notifier)</span> </span>&#123;  </span><br><span class="line">          Description description = describeChild(method);  </span><br><span class="line">            </span><br><span class="line">          <span class="keyword">if</span> (method.getAnnotation(Repeat.class) != <span class="keyword">null</span> &amp;&amp;  </span><br><span class="line">                    method.getAnnotation(Ignore.class) == <span class="keyword">null</span>) &#123;  </span><br><span class="line">               runRepeatedly(methodBlock(method), description, notifier);  </span><br><span class="line">          &#125;  </span><br><span class="line">          <span class="keyword">super</span>.runChild(method, notifier);  </span><br><span class="line">     &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runRepeatedly</span><span class="params">(Statement statement, Description description,  </span><br><span class="line">               RunNotifier notifier)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">for</span> (Description desc : description.getChildren()) &#123;  </span><br><span class="line">               runLeaf(statement, desc, notifier);  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>如果使用了Spring框架，则可以使用注解@Repeat(value = 10)</li>
<li><p>另外写一个运行多次的用例，代码如下。多个用例被当成了一个用例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">itWorks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// stuff</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">itWorksRepeatably</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        itWorks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用tempus-fugit 库，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RunWith</span>(IntermittentTestRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntermittentTestRunnerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> testCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Test</span></span><br><span class="line">   <span class="annotation">@Intermittent</span>(repition = <span class="number">99</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotatedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      testCounter++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用easytest-core 库，代码如下。见<a href="http://www.javacodegeeks.com/2013/10/write-effective-load-tests-using-junit-and-repeat-annotation.html" target="_blank" rel="external">参考３</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="annotation">@Repeat</span>(times=<span class="number">20</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLookup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = lookupNumber(arr);</span><br><span class="line">    assertEquals(<span class="number">3</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考">参考</h1><p>[2]:  　<a href="http://stackoverflow.com/questions/1492856/easy-way-of-running-the-same-junit-test-over-and-over" target="_blank" rel="external">http://stackoverflow.com/questions/1492856/easy-way-of-running-the-same-junit-test-over-and-over</a></p>
]]></content>
    
    <summary type="html">
    
      如何运行一个测试用例多次
    
    </summary>
    
      <category term="测试" scheme="https://github.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://github.com/tags/Java/"/>
    
      <category term="测试" scheme="https://github.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>单元测试笔记</title>
    <link href="https://github.com/2015/08/27/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/2015/08/27/单元测试笔记/</id>
    <published>2015-08-26T16:00:00.000Z</published>
    <updated>2015-08-27T06:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><font color="red">如何运行一个测试用例多次？</font>


</li>
</ol>
]]></content>
    
    <summary type="html">
    
      单元测试笔记
    
    </summary>
    
      <category term="测试" scheme="https://github.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Java" scheme="https://github.com/tags/Java/"/>
    
      <category term="测试" scheme="https://github.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>找出重复3遍的数字</title>
    <link href="https://github.com/2015/08/26/%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D3%E9%81%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://github.com/2015/08/26/找出重复3遍的数字/</id>
    <published>2015-08-25T16:00:00.000Z</published>
    <updated>2015-08-27T07:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>一组整型数中，有一个数字重复3遍，其它数字重复2遍，请找出这个重复3遍的数字。比如：[88, 459, 5262, 88, -17, 677, 88, 677, -17, 459, 5262], 结果为88。要求程序代码中额外申请的空间为O(1)，请给出一个平均时间复杂度不大于O(nlogn)的算法。请首先用文字阐述答题思路，然后用Java程序实现。(阿里　2016)</p>
</blockquote>
<h1 id="解答１">解答１</h1><ol>
<li>两个相同的数异或（^）之后的值为０</li>
<li>将所有的数异或起来就可以消去相同的两个数</li>
<li>任意数和０异或都得到自身</li>
</ol>
<h1 id="代码１">代码１</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xorArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">        result ^= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 测试用例如下：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXorArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">88</span>, <span class="number">459</span>, <span class="number">5262</span>, <span class="number">88</span>, -<span class="number">17</span>, <span class="number">677</span>, <span class="number">88</span>, <span class="number">677</span>, -<span class="number">17</span>, <span class="number">459</span>, <span class="number">5262</span>&#125;;</span><br><span class="line">    assertEquals(<span class="number">88</span>, xorArray(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="解答２">解答２</h1><ol>
<li>参考快速排序<code>partition</code>方法，将小于选中的数全部放在左边，大于或等于选中的数则放在右边。其中如果选中的数有多个，则最后一个数也必须是该数</li>
<li>如果小于当前数的个数是偶数，则待查找的数大于等于选中的数。如果最后一位数不等于选中的数，则表示选中的数只有一个，此时选中的数即为要查找的数；递归查找大于或等于选中的数（去掉两头的数）</li>
<li>如果小于当前数的个数是偶数，则待查找的数小于选中的数，递归查找所有小于选中的数</li>
<li><p>如果右边没有数字，即所有的数都小于选中的数，则该数即为要查找的数</p>
<a id="more"></a>
<h1 id="代码２">代码２</h1><p>交换数组中的两个数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = arr[i] ^ arr[j];</span><br><span class="line">    arr[j] = arr[i] ^ arr[j];</span><br><span class="line">    arr[i] = arr[i] ^ arr[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>放快速排序的分割算法，将小于选中的数全部放到该数左边，大于等于选中的数全部放到右边。需要注意处理等于的情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span>(start&lt;end);</span><br><span class="line">        <span class="keyword">int</span> selectIndex = rand.nextInt(end - start+<span class="number">1</span>) + start;</span><br><span class="line"><span class="comment">//      System.out.println(start+" "+ end + " " + selectIndex);</span></span><br><span class="line"><span class="comment">//      int selectIndex = end;</span></span><br><span class="line">        <span class="keyword">int</span> selectValue = arr[selectIndex];</span><br><span class="line">        swap(arr, selectIndex, end);</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = end - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt;= selectValue &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i]==selectValue) &#123;</span><br><span class="line">                    swap(arr, i, end-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (arr[i]==selectValue) &#123;<span class="comment">//防止死循环</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr[j]&gt;=selectValue &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j]==selectValue) &#123;</span><br><span class="line">                    swap(arr, j, end-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt; selectValue &amp;&amp; i &lt;= j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i, end);</span><br><span class="line">        <span class="keyword">if</span> (arr[end-<span class="number">1</span>] ==  selectValue) &#123;</span><br><span class="line">            swap(arr, end-<span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      printArray(arr);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>查找代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lookupNumber</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lookupNumber(arr, <span class="number">0</span>, arr.length -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lookupNumber</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end) &#123;<span class="comment">//只有一个数</span></span><br><span class="line">        <span class="keyword">return</span> arr[start];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = partition(arr, start, end);</span><br><span class="line">    <span class="keyword">if</span> (i == end || arr[i] !=  arr[end]) &#123;<span class="comment">//如果选中的数字只有一个或者右边没有数字，则返回</span></span><br><span class="line">        <span class="keyword">return</span> arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (((i - start) &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;<span class="comment">//小于当前数的个数是偶数，则有３个数的在右边</span></span><br><span class="line">        <span class="keyword">return</span>  lookupNumber(arr, i + <span class="number">1</span>, end - <span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lookupNumber(arr, start, i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试用例如下：（@Repeat(40000)是指循环执行测试40000次，循环测试见<a href="/2015/08/28/如何运行一个测试用例多次/">如何运行一个测试用例多次</a>）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="annotation">@Repeat</span>(<span class="number">40000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLookup2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">88</span>, <span class="number">459</span>, <span class="number">5262</span>, <span class="number">88</span>, -<span class="number">17</span>, <span class="number">677</span>, <span class="number">88</span>, <span class="number">677</span>, -<span class="number">17</span>, <span class="number">459</span>, <span class="number">5262</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i = lookupNumber(arr);</span><br><span class="line">        assertEquals(<span class="number">88</span>, i);</span><br><span class="line"><span class="comment">//      System.out.println("t===========================t");</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      找出重复3遍的数字
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://github.com/tags/Java/"/>
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何禁止一个容器的所有行为</title>
    <link href="https://github.com/2015/08/25/%E5%A6%82%E4%BD%95%E7%A6%81%E6%AD%A2%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E7%9A%84%E6%89%80%E6%9C%89%E8%A1%8C%E4%B8%BA/"/>
    <id>https://github.com/2015/08/25/如何禁止一个容器的所有行为/</id>
    <published>2015-08-24T16:00:00.000Z</published>
    <updated>2015-08-25T01:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何禁止（disable）一个容器的所有行为（包括不响应任何事件）？</p>
</blockquote>
<h1 id="分析">分析</h1><ol>
<li><p>一个容器还包括子容器，子容器也是需要禁止的，因此需要使用递归来解决。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 改变一个容器及其子容器的enbale状态</span><br><span class="line"> * <span class="doctag">@param</span> container</span><br><span class="line"> * <span class="doctag">@param</span> enable　如果为false则Disable  容器</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enableComponents</span><span class="params">(Container container, <span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">    Component[] components = container.getComponents();</span><br><span class="line">    <span class="keyword">for</span> (Component component : components) &#123;</span><br><span class="line">        component.setEnabled(enable);</span><br><span class="line">        <span class="keyword">if</span> (component <span class="keyword">instanceof</span> Container) &#123;</span><br><span class="line">            enableComponents((Container)component, enable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>disable一个容器并不会临时移除事件</p>
<p>javadoc中的描述是：</p>
<blockquote>
<p>Enables or disables this component, depending on the value of the parameter b. An enabled component can respond<br>to user input and generate events. Components are enabled initially by default.<br><strong>Note: Disabling a lightweight component does not prevent it from receiving MouseEvents. </strong><br><strong>Note: Disabling a heavyweight container prevents all components in this container from receiving any input events. </strong></p>
</blockquote>
<p>可以看到，disable一个容器并不会临时移除事件。此时有两种解决方案：</p>
</li>
</ol>
<ul>
<li>移除所有事件。但如果以后还需要添加这些事件的话，需要保存这些事件，操作起来比较麻烦。</li>
<li>在所有事件的处理方法开始时，添加判断<code>isEnabled</code>代码，如果为<code>false</code>则直接返回。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!container.isEnabled()) &#123;<span class="comment">//确保panel被禁止时不处理事件。</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      如何禁止一个容器的所有行为
    
    </summary>
    
      <category term="Java" scheme="https://github.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://github.com/tags/Java/"/>
    
      <category term="Swing" scheme="https://github.com/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>如何使JOptionPane.showMessageDialog 显示的信息可复制</title>
    <link href="https://github.com/2015/08/24/%E5%A6%82%E4%BD%95%E4%BD%BFJOptionPane.showMessageDialog%20%E6%98%BE%E7%A4%BA%E7%9A%84%E4%BF%A1%E6%81%AF%E5%8F%AF%E5%A4%8D%E5%88%B6/"/>
    <id>https://github.com/2015/08/24/如何使JOptionPane.showMessageDialog 显示的信息可复制/</id>
    <published>2015-08-23T16:00:00.000Z</published>
    <updated>2015-08-24T09:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何使JOptionPane.showMessageDialog 显示的信息分行显示且可复制?</p>
</blockquote>
<h1 id="分析">分析</h1><ol>
<li>使用<code>JTextArea</code>，并将其设为不可编辑，使用其克复制功能</li>
<li>调用<code>setLineWrap</code>和<code>setWrapStyleWord</code>方法使<code>JTextArea</code>按单词计数分行显示</li>
<li>调用<code>setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER)</code>使得水平滑动按钮消失。</li>
</ol>
<h1 id="代码">代码</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span><br><span class="line">     * 显示错误信息提示框，以便提示用户错误信息</span><br><span class="line">     * <span class="doctag">@param</span> errorMsg 错误信息</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showErrorDialog</span><span class="params">(String errorMsg)</span></span>&#123;</span><br><span class="line">         <span class="comment">// create a JTextArea</span></span><br><span class="line">          JTextArea textArea = <span class="keyword">new</span> JTextArea(<span class="number">6</span>, <span class="number">25</span>);</span><br><span class="line">          textArea.setText(errorMsg + ErrorMsg.SEE_ERROR_LOG );</span><br><span class="line">          textArea.setEditable(<span class="keyword">false</span>);</span><br><span class="line">          textArea.setWrapStyleWord(<span class="keyword">true</span>);</span><br><span class="line">          textArea.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">          textArea.setCaretPosition(<span class="number">0</span>);</span><br><span class="line">           </span><br><span class="line">          <span class="comment">// wrap a scrollpane around it</span></span><br><span class="line">          JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(textArea);</span><br><span class="line">          scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);</span><br><span class="line"><span class="comment">//      String msg = CommonUtils.divideIntoMultiLines(errorMsg + ErrorMsg.SEE_ERROR_LOG, 20)  ;</span></span><br><span class="line">          JOptionPane.showMessageDialog(<span class="keyword">null</span>,scrollPane ,  <span class="string">"错误信息"</span>, JOptionPane.ERROR_MESSAGE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如何使JOptionPane.showMessageDialog 显示的信息可复制
    
    </summary>
    
      <category term="Java" scheme="https://github.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://github.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何将一行太长的字符串分割成多行</title>
    <link href="https://github.com/2015/08/21/%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E8%A1%8C%E5%A4%AA%E9%95%BF%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2%E6%88%90%E5%A4%9A%E8%A1%8C/"/>
    <id>https://github.com/2015/08/21/如何将一行太长的字符串分割成多行/</id>
    <published>2015-08-20T16:00:00.000Z</published>
    <updated>2015-08-24T09:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何将一行太长的字符串分割成多行？</p>
</blockquote>
<h1 id="分析">分析</h1><p> 首先我们需要考虑中文字符的情况，一个汉字 <code>getBytes().length == 2</code></p>
<ol>
<li><p>判断一个字符是否中文字符的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChineseChar</span><span class="params">(<span class="keyword">char</span> ch)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ch).getBytes(<span class="string">"GBK"</span>).length &gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历字符串，遇到英文字符计数加１，遇到中文字符计数加２。当计数大于或等于每行要求的字符数时，添加换行符并重置计数。</p>
</li>
</ol>
<h1 id="代码">代码</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 将一行字符串以固定字节（非字符）长度分成多行显示。每行显示的字符至多为&lt;code&gt;numbersPerLine+1&lt;/code&gt;</span><br><span class="line"> * <span class="doctag">@param</span> source　原字串</span><br><span class="line"> * <span class="doctag">@param</span> numbersPerLine 每行的字节数， 如果是负数，则看成无穷大，返回原字串</span><br><span class="line"> * <span class="doctag">@return</span> 在合适位置添加了换行符的字串</span><br><span class="line"> * <span class="doctag">@throws</span> UnsupportedEncodingException </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">divideIntoMultiLines</span><span class="params">(String source,<span class="keyword">int</span> numbersPerLine)</span></span><br><span class="line">     <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == source ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> gbkLen = source.getBytes(<span class="string">"GBK"</span>).length;</span><br><span class="line">    <span class="keyword">if</span> (gbkLen &lt;= numbersPerLine || numbersPerLine &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>  countOfLines = (gbkLen - <span class="number">1</span>) / numbersPerLine +<span class="number">1</span> ;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(gbkLen + countOfLines-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> len = source.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++) &#123;</span><br><span class="line">        ch = source.charAt(i);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (isChineseChar(ch)) &#123;</span><br><span class="line">            count++;<span class="comment">//中文字符占两个字节</span></span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(ch);</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= numbersPerLine) &#123;<span class="comment">//完成一行分割</span></span><br><span class="line">            count = <span class="number">0</span> ;</span><br><span class="line">            sb.append(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      如何将一行太长的字符串分割成多行
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://github.com/2015/08/11/Git%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/2015/08/11/Git笔记/</id>
    <published>2015-08-10T16:00:00.000Z</published>
    <updated>2015-08-11T06:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><font color="red">如何在命令行显示版本树</font><br>使用<code>git log --graph --oneline --all</code>  ， 效果如下：<br><img src="/images/gitTree.png" alt="命令行中的版本树"><br>为方便书写，可以使用以下命令设置别名<br><code>git config --global alias.tree &quot;log --oneline --decorate --all --graph&quot;</code><br>然后我们就可以输入命令<code>git tree</code> 就可以达到同样的效果了<br>参考：<a href="http://stackoverflow.com/questions/1064361/unable-to-show-a-git-tree-in-terminal" target="_blank" rel="external">http://stackoverflow.com/questions/1064361/unable-to-show-a-git-tree-in-terminal</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Git笔记
    
    </summary>
    
      <category term="Git" scheme="https://github.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://github.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java 的swing.GroupLayout布局管理器的使用方法和实例【图文说明】</title>
    <link href="https://github.com/2015/08/07/Java%E7%9A%84swing.GroupLayout%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B/"/>
    <id>https://github.com/2015/08/07/Java的swing.GroupLayout布局管理器的使用方法和实例/</id>
    <published>2015-08-06T16:00:00.000Z</published>
    <updated>2015-08-11T08:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文转载自<a href="http://www.cnblogs.com/taoweiji/archive/2012/12/10/2812221.html" target="_blank" rel="external">Java 的swing.GroupLayout布局管理器的使用方法和实例</a></p>
<h1 id="GroupLayout">GroupLayout</h1><ol>
<li>GroupLayout 是一个 LayoutManager，它将组件按层次分组，以决定它们在 Container 中的位置。GroupLayout 主要供生成器使用，但也可以手工编码。分组由 Group 类的实例来完成。GroupLayout 支持两种组。串行组 (sequential group) 按顺序一个接一个地放置其子元素。并行组 (parallel group) 能够以四种方式对齐其子元素。</li>
<li>每个组可以包含任意数量的元素，其中元素有 Group、Component 或间隙 (gap)。间隙可被视为一个具有最小大小、首选大小和最大大小的不可见组件。此外，GroupLayout 还支持其值取自 LayoutStyle 的首选间隙。</li>
<li>GroupLayout是一个很重要的是额布局管理器，在jdk 1.6才加入，配合其它的管理器可以实现很好的界面。</li>
<li>GroupLayout必须要设置它的GroupLayout.setHorizontalGroup和GroupLayout.setVerticalGroup。</li>
<li>GroupLayout.setHorizontalGroup是指按照水平来确定，下面例子“账号”和“密码”是一个级别的，其它的组件也是一个级别的。详情请看代码</li>
<li>GroupLayout.setVerticalGroup。是按照垂直来确定的。他们的级别是按照Group去设置组件的优先级别，级别越高就显示越上面。</li>
<li>添加顺序：<code>GroupLayout.setHorizontalGroup(SequentialGroup(ParallelGroup(component)));</code> 。大概就是按照这个顺序去添加,当然不是就这么简单设置，多个component添加到ParallelGroup，然后多个ParallelGroup添加到SequentialGroup里面，然后就设置到GroupLayout。</li>
</ol>
<h1 id="例子">例子</h1><ol>
<li>程序效果<br>需要实现的效果如下图：<br><img src="/images/groupLayout_app.png" alt="程序效果"></li>
<li>程序分析<br>下面的实例，设置GroupLayout.setHorizontalGroup，就是把2和4添加到一个ParallelGroup.addComponent(component)，其它1,3,5,6,7,8添加到另一个ParallelGroup，然后把这两个ParallelGroup按照顺序添加到SequentialGroup.addGrou(ParallelGroup);<br><img src="/images/groupLayout_analysis.png" alt="程序分析"></li>
</ol>
<h1 id="代码">代码</h1><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* <span class="doctag">@author</span> ：陶伟基 ，微博：http://weibo.com/taoandtao</span><br><span class="line">* <span class="doctag">@date</span> ：2012/12/10</span><br><span class="line">* <span class="doctag">@place</span>：广州大学华软软件学院</span><br><span class="line">*/</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.GroupLayout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.GroupLayout.Alignment;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPasswordField;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JRadioButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextField;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">javax</span>.<span class="title">swing</span>.<span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyFrame f = <span class="keyword">new</span> MyFrame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JLabel label1;</span><br><span class="line">    JLabel label2;</span><br><span class="line">    JLabel label3;</span><br><span class="line">    JTextField tf;</span><br><span class="line">    JPasswordField psf;</span><br><span class="line">    JRadioButton rb1;</span><br><span class="line">    JRadioButton rb2;</span><br><span class="line"></span><br><span class="line">    JButton bt1;</span><br><span class="line">    JButton bt2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">250</span>, <span class="number">220</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setLocation(<span class="number">400</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        label1 = <span class="keyword">new</span> JLabel(<span class="string">"华软BBS快捷登陆"</span>);</span><br><span class="line">        label2 = <span class="keyword">new</span> JLabel(<span class="string">"账号："</span>);</span><br><span class="line">        label3 = <span class="keyword">new</span> JLabel(<span class="string">"密码："</span>);</span><br><span class="line">        tf = <span class="keyword">new</span> JTextField();</span><br><span class="line">        psf = <span class="keyword">new</span> JPasswordField();</span><br><span class="line">        rb1 = <span class="keyword">new</span> JRadioButton(<span class="string">"记住密码"</span>);</span><br><span class="line">        rb2 = <span class="keyword">new</span> JRadioButton(<span class="string">"自动登陆"</span>);</span><br><span class="line">        bt1 = <span class="keyword">new</span> JButton(<span class="string">"登陆"</span>);</span><br><span class="line">        <span class="comment">// 为指定的 Container 创建 GroupLayout</span></span><br><span class="line">        GroupLayout layout = <span class="keyword">new</span> GroupLayout(<span class="keyword">this</span>.getContentPane());</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().setLayout(layout);</span><br><span class="line">        <span class="comment">//创建GroupLayout的水平连续组，，越先加入的ParallelGroup，优先级级别越高。</span></span><br><span class="line">        GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();</span><br><span class="line">        hGroup.addGap(<span class="number">5</span>);<span class="comment">//添加间隔</span></span><br><span class="line">        hGroup.addGroup(layout.createParallelGroup().addComponent(label2)</span><br><span class="line">                .addComponent(label3));</span><br><span class="line">        hGroup.addGap(<span class="number">5</span>);</span><br><span class="line">        hGroup.addGroup(layout.createParallelGroup().addComponent(label1)</span><br><span class="line">                .addComponent(psf).addComponent(rb1).addComponent(rb2)</span><br><span class="line">                .addComponent(tf).addComponent(bt1));</span><br><span class="line">        hGroup.addGap(<span class="number">5</span>);</span><br><span class="line">        layout.setHorizontalGroup(hGroup);</span><br><span class="line">        <span class="comment">//创建GroupLayout的垂直连续组，，越先加入的ParallelGroup，优先级级别越高。</span></span><br><span class="line">        GroupLayout.SequentialGroup vGroup = layout.createSequentialGroup();</span><br><span class="line">        vGroup.addGap(<span class="number">10</span>);</span><br><span class="line">        vGroup.addGroup(layout.createParallelGroup().addComponent(label1));</span><br><span class="line">        vGroup.addGap(<span class="number">10</span>);</span><br><span class="line">        vGroup.addGroup(layout.createParallelGroup().addComponent(label2)</span><br><span class="line">                .addComponent(tf));</span><br><span class="line">        vGroup.addGap(<span class="number">5</span>);</span><br><span class="line">        vGroup.addGroup(layout.createParallelGroup().addComponent(label3)</span><br><span class="line">                .addComponent(psf));</span><br><span class="line">        vGroup.addGroup(layout.createParallelGroup().addComponent(rb1));</span><br><span class="line"></span><br><span class="line">        vGroup.addGroup(layout.createParallelGroup().addComponent(rb2));</span><br><span class="line">        vGroup.addGroup(layout.createParallelGroup(Alignment.TRAILING)</span><br><span class="line">                .addComponent(bt1));</span><br><span class="line">        vGroup.addGap(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//设置垂直组</span></span><br><span class="line">        layout.setVerticalGroup(vGroup);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java 的swing.GroupLayout布局管理器的使用方法和实例【图文说明】
    
    </summary>
    
      <category term="Java" scheme="https://github.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://github.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>给定数组a[N]构造数组b [N]——腾讯笔试</title>
    <link href="https://github.com/2015/08/04/%E7%BB%99%E5%AE%9A%E6%95%B0%E7%BB%84a%E6%9E%84%E9%80%A0%E6%95%B0%E7%BB%84b/"/>
    <id>https://github.com/2015/08/04/给定数组a构造数组b/</id>
    <published>2015-08-03T16:00:00.000Z</published>
    <updated>2015-08-06T03:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>给定一个数组a[N]，我们希望构造数组b [N]，其中b[j]=a[0]*a[1]…a[N-1] / a[j]，在构造过程中，不允许使用除法：要求O（1）空间复杂度和O（n）的时间复杂度；除遍历计数器与a[N] b[N]外，不可使用新的变量（包括栈临时变量、堆空间和全局静态变量等）</p>
</blockquote>
<h1 id="解答">解答</h1><p>不能使用除法，那就不能直接全部做乘法再做除法。<br><code>b[j]=a[0]*a[1]…a[N-1] / a[j]</code>，其实就是a中除去第j个数其他数相乘。<br>既然不能使用除法，就只能将整个式子分成两部分：<code>a[0]*a[1]*...*a[j-1]</code> 和 <code>a[j+1]*a[j+2]*...*a[N-1]</code></p>
<ol>
<li><p>首先构造第一部分<br>令b[0] = 1 , <code>b[j] = b[j-1]*a[j-1]</code><br>b[1] = a[0]<br>b[2] = a[0]*a[1]<br>…<br>b[j] = a[0]*a[1]*…*a[j-1]<br>…<br>b[n-1] = a[0]*a[1]*…*a[n-2]</p>
</li>
<li><p>然后开始构造第二部分<br>因为初始都是从1开始构造，所以这次我们需要从后往后前构造。<br>令b[0] = 1 , <code>b[j] = b[0]*b[j]</code> ，每次前进重新计算b[0]的值，作为临时变量 : <code>b[0]= b[0]*a[j]</code></p>
<p>b[n-1] = a[0]*a[1]*…*a[n-2]* 1 , b[0] = a[n-1]<br>b[n-2] = a[0]*a[1]*…*a[n-3]* a[n-1] , b[0] = a[n-1]*a[n-2]<br>b[n-3] = a[0]*a[1]*…*a[n-4]*a[n-2]* a[n-1] , b[0] = a[n-1]*a[n-2]*a[n-3]<br>…<br>b[j] = a[0]*a[1]*…*a[j-1].*a[j+1]* a[j+2]*..*a[n-2]* a[n-1] , b[0] = a[n-1]*a[n-2]*..*a[j]<br>…<br>b[1] = a[0]*a[2]*…*a[n-3]*a[n-2]* a[n-1], b[0] = a[n-1]*a[n-2]*..*a[1]</p>
<p>此部分，每当计算b[j]时，<code>b[0] = a[n-1]*a[n-2]*...a[j]</code> ,正好是下一次需要计算的右边部分。<br>此时，所有的b[j] 都满足 <code>b[j]=a[0]*a[1]…a[N-1] / a[j]</code></p>
<a id="more"></a>
<h1 id="代码">代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] translate(<span class="keyword">int</span> a[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> len = a.length;</span><br><span class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> b[len];</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len-<span class="number">1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[j] = b[j-<span class="number">1</span>]*a[j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = len-<span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        b[j] *= b[<span class="number">0</span>];</span><br><span class="line">        b[<span class="number">0</span>] *= a[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考">参考</h1><p>[1]: <a href="http://blog.csdn.net/wumuzi520/article/details/7841280" target="_blank" rel="external">给定数组a[N]构造数组b [N]——腾讯笔试</a></p>
]]></content>
    
    <summary type="html">
    
      给定一个数组a[N]，我们希望构造数组b [N]，其中b[j]=a[0]*a[1]…a[N-1] / a[j]，在构造过程中，不允许使用除法：要求O（1）空间复杂度和O（n）的时间复杂度；除遍历计数器与a[N] b[N]外，不可使用新的变量（包括栈临时变量、堆空间和全局静态变量等）
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>顺时针操作矩阵</title>
    <link href="https://github.com/2015/08/04/%E9%A1%BA%E6%97%B6%E9%92%88%E6%93%8D%E4%BD%9C%E7%9F%A9%E9%98%B5/"/>
    <id>https://github.com/2015/08/04/顺时针操作矩阵/</id>
    <published>2015-08-03T16:00:00.000Z</published>
    <updated>2015-08-04T10:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>给你一个大于0的整数n，请输出一个n行n列的数据表，并且要满足以下规律（以n=10为例）</p>
</blockquote>
<center><img src="/images/n行n列的数据表.jpg" alt="n行n列的数据表"></center>

<h1 id="解答">解答</h1><ol>
<li><p>按圈遍历数组<br>函数：<code>int[][]  genCycleMatrix(int rows, int columns)</code> </p>
<ul>
<li>数字是按顺时针一圈一圈递增的，从1 开始 ；</li>
<li>每一圈数字的开头都是方阵[n×n]对角线上的数字（[0,0],[1,1]…）,n = min（rows, columns），其中rows, columns分别为行数和列数</li>
<li>一般情况下，一圈有两行两列，当行数或列数为奇数时，最后一圈会出现少行少列现象。故按圈打印数字的终止条件是<code>start * 2 &lt;n</code><br>代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startNumber = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start * <span class="number">2</span> &lt; rows &amp;&amp; start *<span class="number">2</span> &lt; columns ;start++) &#123;</span><br><span class="line">    startNumber = genCycleMatrix(a, rows, columns, start, startNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>遍历一圈数组，为依次遍历的元素赋值，并返回下一圈应该开始的数字<br>函数：<code>int genCycleMatrix(int[][] a, int rows, int columns , int start ,int startNumber)</code><br>依次分四个方向<code>从左到右</code>，<code>从上到下</code> ，<code>从右到左</code> ，<code>从下到上</code>。<br>相对于剑指Offer中花大篇幅讲的判断条件，其实可以先写出循环代码，再写满足循环的判断条件，这样就简单许多。<br>需要注意的是后两个方向还需要添加条件<code>start &lt; endX</code> .</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">genCycleMatrix</span><span class="params">(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns </span><br><span class="line">                                                        , <span class="keyword">int</span> start ,<span class="keyword">int</span> startNumber)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> endX = rows -<span class="number">1</span> - start;</span><br><span class="line">    <span class="keyword">int</span> endY = columns -<span class="number">1</span> - start;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从左到右</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= endX; i++) &#123;</span><br><span class="line">        a[start][i] = startNumber++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从上到下</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; endY) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start+<span class="number">1</span>; i &lt;= endY; i++) &#123;</span><br><span class="line">            a[i][endY] = startNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从右到左</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; endY &amp;&amp; start &lt; endX) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = endX-<span class="number">1</span>; i &gt;=  start; i--) &#123;</span><br><span class="line">            a[endY][i] = startNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从下到上</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; endY-<span class="number">1</span> &amp;&amp; start &lt; endX) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = endY-<span class="number">1</span>; i &gt;  start; i--) &#123;</span><br><span class="line">            a[i][start] = startNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> startNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印数组，用于验证生成的数组的正确性<br>函数：<code>void print2DimMatrix(int[][] a ,int rows, int columns) throws Exception</code><br>这段代码比较简单，就是打印一个2维数组。见 #代码</p>
</li>
</ol>
<h1 id="代码">代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatrixInCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][]  genCycleMatrix(<span class="keyword">int</span> rows, <span class="keyword">int</span> columns) </span><br><span class="line">                                                                <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[rows][columns];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> startNumber = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start * <span class="number">2</span> &lt; rows &amp;&amp; start *<span class="number">2</span> &lt; columns ;start++) &#123;</span><br><span class="line">            startNumber = genCycleMatrix(a, rows, columns, start, startNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">genCycleMatrix</span><span class="params">(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns </span><br><span class="line">                                                        , <span class="keyword">int</span> start ,<span class="keyword">int</span> startNumber)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> endX = rows -<span class="number">1</span> - start;</span><br><span class="line">        <span class="keyword">int</span> endY = columns -<span class="number">1</span> - start;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从左到右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= endX; i++) &#123;</span><br><span class="line">            a[start][i] = startNumber++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从上到下</span></span><br><span class="line">        <span class="keyword">if</span> (start &lt; endY) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start+<span class="number">1</span>; i &lt;= endY; i++) &#123;</span><br><span class="line">                a[i][endY] = startNumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从右到左</span></span><br><span class="line">        <span class="keyword">if</span> (start &lt; endY &amp;&amp; start &lt; endX) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = endX-<span class="number">1</span>; i &gt;=  start; i--) &#123;</span><br><span class="line">                a[endY][i] = startNumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从下到上</span></span><br><span class="line">        <span class="keyword">if</span> (start &lt; endY-<span class="number">1</span> &amp;&amp; start &lt; endX) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = endY-<span class="number">1</span>; i &gt;  start; i--) &#123;</span><br><span class="line">                a[i][start] = startNumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> startNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2DimMatrix</span><span class="params">(<span class="keyword">int</span>[][] a ,<span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span> </span><br><span class="line">                                                               <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a ==<span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"array can not be null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"%8d"</span>,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] a= genCycleMatrix(<span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">        print2DimMatrix(a,<span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考">参考</h1><p>[1]：剑指Office-面试题20：顺时针打印矩阵<br>[2]：<a href="http://bbs.lampbrother.net/read-htm-tid-117390.html" target="_blank" rel="external">月初新浪的一道关于算法的笔试题</a></p>
]]></content>
    
    <summary type="html">
    
      给你一个大于0的整数n，请输出一个n行n列的数据表
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>5个不同整数之和小于100</title>
    <link href="https://github.com/2015/08/03/5%E4%B8%AA%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C%E5%B0%8F%E4%BA%8E100/"/>
    <id>https://github.com/2015/08/03/5个不同整数之和小于100/</id>
    <published>2015-08-02T16:00:00.000Z</published>
    <updated>2015-08-11T08:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>求1到100内，任取5个不同整数之和小于100的取法有多少中。列出主要思路即可。（新浪研发笔试）</p>
</blockquote>
<h1 id="解答">解答</h1><p>需要取5个不同整数，设为x1,x2,x3,x4,x5 (<code>x1&lt;x2&lt;x3&lt;x4&lt;x5</code> 且 <code>x1+x2+x3+x4+x5&lt;100</code>) 。<br>由<code>100  &gt; x1+x2+x3+x4+x5 &gt; x1+x1+x1+x1+x1 &gt;5*x1</code> 得 <code>x1 &lt;20</code><br>直接使用5重循环即可解决。</p>
<h1 id="代码">代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x1 = <span class="number">1</span>; x1 &lt; <span class="number">20</span>; x1++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x2 = x1+<span class="number">1</span>; x2 &lt;<span class="number">100</span>; x2++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x3 = x2+<span class="number">1</span>; x3 &lt;<span class="number">100</span>; x3++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x4 = x3+<span class="number">1</span>; x4 &lt;<span class="number">100</span>; x4++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x5 = x4+<span class="number">1</span>; x5 &lt;<span class="number">100</span>; x5++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x1+x2+x3+x4+x5 &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                        System.out.printf(<span class="string">"%d %d %d %d %d \n"</span>,x1,x2,x3,x4,x5);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      求1到100内，任取5个不同整数之和小于100的取法有多少中。
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数组中只出现一次的数字</title>
    <link href="https://github.com/2015/07/29/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://github.com/2015/07/29/数组中只出现一次的数字/</id>
    <published>2015-07-28T16:00:00.000Z</published>
    <updated>2015-07-29T02:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><font color="red">一个整型数组中只有一个数字出现过一次，其他的出现两次，如何找出只出现一次的那个数字？</font><br>解答： 异或运算有一个性质： <strong>任何一个数字异或自己都等于0。</strong><br>如果我们将数组中的数字依次异或，最后得到的就是那个只出现一次的数字。</p>
</li>
<li><p><font color="red">如果一个整型数组只有两个数字只出现一次，其余都出现两次呢？</font><br>解答： 仿照刚刚的思路，<strong>将数组拆分成两个子数组：出现两次的数字需要出现在同一个子数组中，而两个只出现一次的数字分别出现在两个子数组中。</strong><br>可按如下步骤进行： </p>
<ul>
<li>将数组中的数字依次异或，最后得到的就是l两个只出现一次的数字的异或结果 a。</li>
<li>记下a 中第一个为 1 的位的位置 n ，因为异或这一位的结果为1，所以两个只出现一次的数字在这一位分别为0和1，故可分到两组中。<br> 而出现两次的数字两个都将被分到同一组，因为他们的每一位都相同。</li>
<li>分别将两个子数组中的所有数字都异或，即可得到两个只出现一次的数字</li>
</ul>
</li>
</ol>
<h1 id="参考">参考</h1><p>[1]： 剑指Offer</p>
]]></content>
    
    <summary type="html">
    
      数组中只出现一次的数字
    
    </summary>
    
      <category term="Logic" scheme="https://github.com/categories/Logic/"/>
    
    
      <category term="Logic" scheme="https://github.com/tags/Logic/"/>
    
  </entry>
  
  <entry>
    <title>Top N 问题</title>
    <link href="https://github.com/2015/07/28/topNPro/"/>
    <id>https://github.com/2015/07/28/topNPro/</id>
    <published>2015-07-27T16:00:00.000Z</published>
    <updated>2015-07-31T01:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自 <a href="http://www.cnblogs.com/zhjp11/archive/2010/02/26/1674227.html" target="_blank" rel="external">http://www.cnblogs.com/zhjp11/archive/2010/02/26/1674227.html</a><br>原文格式不太好，调整下格式</p>
<p>今天看算法分析是，看到一个这样的问题，就是在一堆数据中查找到第k个大的值。</p>
<h2 id="题目">题目</h2><pre><code>设计一组<span class="keyword">N</span>个数，确定其中第k个最大值
</code></pre><p>这是一个选择问题，当然，解决这个问题的方法很多，本人在网上搜索了一番，查找到以下的方式，决定很好，推荐给大家。<br>所谓“第（前）k大数问题”指的是在长度为n(n&gt;=k)的乱序数组中S找出从大到小顺序的第（前）k个数的问题。</p>
<h2 id="解法">解法</h2><ul>
<li><strong>解法1</strong>： 我们可以对这个乱序数组按照从大到小先行排序，然后取出前k大，总的时间复杂度为O(n*logn + k)。</li>
<li><strong>解法2</strong>： 利用选择排序或交互排序，K次选择后即可得到第k大的数。总的时间复杂度为O(n*k)</li>
<li><strong>解法3</strong>： 利用快速排序的思想，从数组S中随机找出一个元素X，把数组分为两部分Sa和Sb。Sa中的元素大于等于X，Sb中元素小于X。这时有两种情况：<ul>
<li>Sa中元素的个数小于k，则Sb中的第k-|Sa|个元素即为第k大数；</li>
<li>Sa中元素的个数大于等于k，则返回Sa中的第k大数。<strong>时间复杂度近似为O(n)</strong></li>
</ul>
</li>
<li><strong>解法4</strong>： 二分[Smin,Smax]查找结果X，统计X在数组中出现，且整个数组中比X大的数目为k-1的数即为第k大数。时间复杂度平均情况为O(n*logn)</li>
<li><strong>解法5</strong>：用O(4*n)的方法对原数组建最大堆，然后pop出k次即可。时间复杂度为O(4*n + k*logn)</li>
<li><strong>解法6</strong>：维护一个k大小的最小堆，对于数组中的每一个元素判断与堆顶的大小，若堆顶较大，则不管，否则，弹出堆顶，将当前值插入到堆中。时间复杂度O(n * logk)</li>
<li><strong>解法7</strong>：利用hash保存数组中元素Si出现的次数，利用计数排序的思想，线性从大到小扫描过程中，前面有k-1个数则为第k大数，<strong>平均情况下时间复杂度O(n)</strong><a id="more"></a>
</li>
</ul>
<h2 id="举一反三">举一反三</h2><ol>
<li>STL中可以用nth_element求得类似的第n大的数（由谓词决定），使用的是<code>解法3</code>中的思想，还可以用partial_sort对区间进行部分排序，得到类似前k大的数（由谓词决定），它采用的是<code>解法5</code>的思想。</li>
<li><p>求中位数实际上是第k大数的特例。《编程之美》2.5节课后习题：</p>
<ul>
<li><p>如果需要找出N个数中最大的K个不同的浮点数呢？比如，含有10个浮点数的数组（1.5，1.5，2.5，3.5，3.5，5，0，- 1.5，3.5）中最大的3个不同的浮点数是（5，3.5，2.5）。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解答：上面的解法均适用，需要注意的是浮点数比较时和整数不同，另外求hashkey的方法也会略有不同。</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果是找第k到第m(0&lt;k&lt;=m&lt;=n)大的数呢？</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解答：如果把问题看做<span class="keyword">m</span>-k+1个第k大问题，则前面解法均适用。</span><br><span class="line">但是对于类似前k大这样的问题，最好使用解法5或者解法7，总体复杂度较低。</span><br></pre></td></tr></table></figure>
</li>
<li><p>在搜索引擎中，网络上的每个网页都有“权威性”权重，如page rank。如果我们需要寻找权重最大的K个网页，而网页的权重会不断地更新，那么算法要如何变动以达到快速更新（incremental update）并及时返回权重最大的K个网页？</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提示：堆排序？当每一个网页权重更新的时候，更新堆。还有更好的方法吗？</span><br><span class="line">解答：要达到快速的更新，我们可以解法<span class="number">5</span>，使用映射二分堆，可以使更新的操作达到<span class="function"><span class="title">O</span><span class="params">(logn)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在实际应用中，还有一个“精确度”的问题。我们可能并不需要返回严格意义上的最大的K个元素，在边界位置允许出现一些误差。当用户输入一个query的时候，对于每一个文档d来说，它跟这个query之间都有一个相关性衡量权重f (query, d)。搜索引擎需要返回给用户的就是相关性权重最大的K个网页。如果每页10个网页，用户不会关心第1000页开外搜索结果的“精确度”，稍有误差是可以接受的。比如我们可以返回相关性第10 001大的网页，而不是第9999大的。在这种情况下，算法该如何改进才能更快更有效率呢？网页的数目可能大到一台机器无法容纳得下，这时怎么办呢？</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line">归并排序？如果每台机器都返回最相关的K个文档，</span><br><span class="line">那么所有机器上最相关K个文档的并集肯定包含全集中最相关的K个文档。</span><br><span class="line">由于边界情况并不需要非常精确，如果每台机器返回最好的K<span class="operator">'</span>个文档，那么K<span class="operator">'</span>应该如何取值，</span><br><span class="line">以达到我们返回最相关的<span class="number">90</span><span class="comment">%*K个文档是完全精确的，</span></span><br><span class="line">或者最终返回的最相关的K个文档精确度超过<span class="number">90</span><span class="comment">%（最相关的K个文档中90%以上在全集中相关性的确排在前K），</span></span><br><span class="line">或者最终返回的最相关的K个文档最差的相关性排序没有超出<span class="number">110</span><span class="comment">%*K。</span></span><br><span class="line"></span><br><span class="line">解答：</span><br><span class="line">正如提示中所说，可以让每台机器返回最相关的K<span class="operator">'</span>个文档，</span><br><span class="line">然后利用归并排序的思想，得到所有文档中最相关的K个。 </span><br><span class="line">最好的情况是这K个文档在所有机器中平均分布，这时每台机器只要K<span class="operator">'</span> = K / n （n为所有机器总数）；</span><br><span class="line">最坏情况，所有最相关的K个文档只出现在其中的某一台机器上，这时K<span class="operator">'</span>需近似等于K了。</span><br><span class="line">我觉得比较好的做法可以在每台机器上维护一个堆，然后对堆顶元素实行归并排序。</span><br></pre></td></tr></table></figure>
</li>
<li><p>如第4点所说，对于每个文档d，相对于不同的关键字q1, q2, …, qm，分别有相关性权重f（d, q1），f（d, q2）, …, f（d, qm）。如果用户输入关键字qi之后，我们已经获得了最相关的K个文档，而已知关键字qj跟关键字qi相似，文档跟这两个关键字的权重大小比较靠近，那么关键字qi的最相关的K个文档，对寻找qj最相关的K个文档有没有帮助呢？</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解答：肯定是有帮助的。</span><br><span class="line">在搜索关键字qj最相关的<span class="keyword">K</span>个文档时，</span><br><span class="line">可以在qj的“近义词”相关文档中搜索部分，然后在全局的所有文档中在搜索部分。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      设计一组N个数，确定其中第k个最大值
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="https://github.com/2015/07/27/useStacksImplementsQueue/"/>
    <id>https://github.com/2015/07/27/useStacksImplementsQueue/</id>
    <published>2015-07-26T16:00:00.000Z</published>
    <updated>2015-07-31T01:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>用两个栈实现队列</p>
</blockquote>
<h1 id="解法">解法</h1><ol>
<li>stack1 为进栈，添加数据都push到本栈</li>
<li>stack2 为出栈，删除数据都从本栈pop。<br>如果删除时 stack2 为空而 stack1 不为空，则先将stack1中的数据全部 pop 出来依次 push 到 stack2 中，然后再从 stack2 pop。</li>
</ol>
<h1 id="举一反三">举一反三</h1><p>也可使用两个队列实现栈，方法类似。</p>
]]></content>
    
    <summary type="html">
    
      用两个栈实现队列
    
    </summary>
    
      <category term="算法" scheme="https://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>笔试通过问题</title>
    <link href="https://github.com/2015/07/26/passWritingExamPro/"/>
    <id>https://github.com/2015/07/26/passWritingExamPro/</id>
    <published>2015-07-25T16:00:00.000Z</published>
    <updated>2015-07-29T02:19:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>某招聘笔试共有120人参加，考试有6道题。1-6道分别有86人，88人，92人，76人，72人和70人答对，如果答对3道或3道以上通过笔试，问至少有多少人通过？</p>
</blockquote>
<h1 id="解法">解法</h1><p>最差的情况是<strong>答对2道题和6题的人足够多</strong>总共答对题次<code>86+88+92+76+72+70=484</code><br>每人至少答对2题，答对6题的人有：<code>(484-240)/4=61</code></p>
]]></content>
    
    <summary type="html">
    
      笔试通过问题
    
    </summary>
    
      <category term="Logic" scheme="https://github.com/categories/Logic/"/>
    
    
      <category term="Logic" scheme="https://github.com/tags/Logic/"/>
    
  </entry>
  
  <entry>
    <title>女生散步问题</title>
    <link href="https://github.com/2015/07/25/girlWalkingPro/"/>
    <id>https://github.com/2015/07/25/girlWalkingPro/</id>
    <published>2015-07-24T16:00:00.000Z</published>
    <updated>2015-07-29T02:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><blockquote>
<p>个学校的15个女生一直3个一群上学。请问该如何安排才能使这些女生每周7天每天都和两个不同的同伴结伴同行呢？例如：用A到O来标识这些女孩，7天A正好和B到O这14个女孩各同行一次。而B到O每个人和都和其他14个女孩各同行一次。<br><a id="more"></a></p>
</blockquote>
<h1 id="解法">解法</h1><p>其实解题思路就是要你找出所有的三人组合,而且这个三人组合里面不能有重复过的两人组合.<br>三人组合所有情况:C(3,15) =  35 × 13  种。但是,三人组合显然不是我们想要的,因为里面有太多的重复了。<br>题目要的就是每两个人之间在一起只出现过一次,所以先考虑二人组合。二人组合所有情况:C(2,15) =  15 × 7  种。<br>就好比如题目的A~O标号同学,对于二人组合,就有：<br>AB,AC,AD,AE,AF,AG…….AM,AO;<br>      BC,BD,BE,BF,BG……BM,BO;<br>………<br>                                     NM,NO;<br>                                           MO;<br>然后通过研究得出了以下几点结论:</p>
<p><strong>结论1.</strong><br>三人行, 说明是这三个人的组合,是三个组合, 而且成为了一个环.<br>就比如 ABC 这三个同学吧,  他就是AB,BC,AC这三个组合而来的一个环.<br>同样,ADE这三个同学,就是有二人组合可能性里面的AD,DE,AE构成的.<br>至于为什么要说他是一个环?<br>这个很重要,真的…….我一开始忽略了一点,就随便拿起来就组合…结果多出了几个剩男剩女..(不<br>上面题目说了,组合只能出现一次,<br>比如你最后多出了EI,FH,CE,CH,BF,BI,这里六个组合,理应还能再组成两队人的.<br>可惜不成环,所以就失败了.</p>
<p><strong>结论2.</strong><br>三人行问题,先求出二人组合,二人组合搭配数整除3,得出的就是可行的不同组合.<br>题目的15人求三人行.二人组合有105种,除3之后就是最多有35个环,刚好5组×7天 =35<br>题目得解.不能整除3的话,呵呵!</p>
<p><strong>结论3.</strong><br>每一个三人组合,是三个二人组合连接而成.同时,每一个同学,在这三个二人组合里面,都出现了2次.<br>比如ABC这个三人组合,是由AB,AC,BC这三个二人组合而来的.同时A出现了2次,B出现了2次,C也出现了2次…<br>听上去好像很白痴的结论,其实这个很重要.</p>
<p>我就换个问题说吧,假如把题目的15个人改成6个人里面求三人行的组合呢?<br>咋一算,二人组合所有情况:C(2,15) =  3 × 5  种。再除以3,得到5个环.按照结论2来说应该有5个环,就是可以有五种组合才对.可不,你可以尝试用ABCDEF这六个代号去试试画连通图.</p>
<p>假如ABC成了一个环,  ADE成了一个环,  AF就是剩男剩女了. 上面就说了,一个环内的一个代号至少出现两次. ABC中A在AB,AC出现.    ADE中在AD,AE中出现.那么AF无论跟谁怎么组合,都不可能成环了.所以结论就是总人数必须是奇数才不会有人多出来.</p>
<p>解决方法这么一来就有很多了,可以用广度搜索树,可以用队列,也可以用图…为了怕麻烦就换个简单点的数据.比如9个人求三人行的组合可能情况.</p>
<p>首先  ,根据<code>结论1</code><br>由<code>结论2</code>得出   36÷3=12  ,说明理应可以构成12个环<br>9个人是奇数,也满足<code>结论3</code>.<br>标号   ABCDEFGHI<br>组合的可能情况<br>ABC       ADE       AFG        AHI<br>BDF       BEI       BGH     (第二个为啥不是BEG呢,因为BHI是不行的,要跳着来组合,学着点)<br>CDH       CEG       CFI<br>DGI       EFH </p>
<p>三人组合所有情况:C(3,15) =  35 × 13  种</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;个学校的15个女生一直3个一群上学。请问该如何安排才能使这些女生每周7天每天都和两个不同的同伴结伴同行呢？例如：用A到O来标识这些女孩，7天A正好和B到O这14个女孩各同行一次。而B到O每个人和都和其他14个女孩各同行一次。&lt;br&gt;
    
    </summary>
    
      <category term="Logic" scheme="https://github.com/categories/Logic/"/>
    
    
      <category term="Logic" scheme="https://github.com/tags/Logic/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘笔记</title>
    <link href="https://github.com/2015/07/24/dataMiningNote/"/>
    <id>https://github.com/2015/07/24/dataMiningNote/</id>
    <published>2015-07-23T16:00:00.000Z</published>
    <updated>2015-08-11T08:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Coming Soon<a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coming Soon
    
    </summary>
    
      <category term="数据挖掘" scheme="https://github.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="数据挖掘" scheme="https://github.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
</feed>
